terraform/
│── main.tf               # AWS Resources (Secrets Manager, Lambda, SNS, SQS, KMS, CloudWatch)
│── variables.tf          # Input Variables
│── outputs.tf            # Output Values
│── iam.tf                # IAM Roles & Policies
│── lambda.tf             # Lambda Function Setup
│── kms.tf                # KMS Key Setup
│── sns_sqs.tf            # SNS & SQS Configuration
│── cloudwatch.tf         # Monitoring (CloudWatch Logs & Alarms)
│── secrets_rotation.py   # Lambda Function Code
│── terraform.tfvars      # User-defined variables

###Step 1: Define Variables 

variable "aws_region" {
  description = "AWS Region"
  default     = "eu-north-1"
}

variable "s3_secret_name" {
  description = "Secrets Manager secret name"
  default     = "s3_access_secret"
}

variable "iam_user_name" {
  description = "IAM user for accessing S3"
  default     = "user"
}

variable "sns_topic_name" {
  description = "SNS Topic for secret rotation alerts"
  default     = "SecretRotationTopic"
}

variable "sqs_queue_name" {
  description = "SQS Queue for storing SNS notifications"
  default     = "SecretsQueue"
}


### Step 2: IAM Role & Policies (iam.tf

resource "aws_iam_role" "lambda_secret_rotation_role" {
  name = "LambdaSecretRotationRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "lambda_policy" {
  name        = "LambdaSecretRotationPolicy"
  description = "Permissions for Lambda to manage secrets and send notifications"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = ["secretsmanager:GetSecretValue", "secretsmanager:PutSecretValue", "secretsmanager:UpdateSecretVersionStage"]
        Resource = "arn:aws:secretsmanager:${var.aws_region}:*:secret/${var.s3_secret_name}*"
      },
      {
        Effect   = "Allow"
        Action   = ["iam:CreateAccessKey", "iam:DeleteAccessKey", "iam:ListAccessKeys"]
        Resource = "arn:aws:iam::*:user/${var.iam_user_name}"
      },
      {
        Effect   = "Allow"
        Action   = ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
        Resource = "arn:aws:logs:${var.aws_region}:*:*"
      },
      {
        Effect   = "Allow"
        Action   = ["sns:Publish"]
        Resource = aws_sns_topic.secret_rotation_topic.arn
      },
      {
        Effect   = "Allow"
        Action   = ["kms:GenerateDataKey", "kms:Decrypt"]
        Resource = aws_kms_key.sns_sqs_key.arn
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attach" {
  role       = aws_iam_role.lambda_secret_rotation_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}


### Step 3: AWS Secrets Manager (main.tf)

resource "aws_secretsmanager_secret" "s3_secret" {
  name                    = var.s3_secret_name
  recovery_window_in_days = 0
}


### Step 4: Create AWS Lambda Function for Secret Rotation (lambda.tf)

resource "aws_lambda_function" "rotate_secret_lambda" {
  function_name = "RotateSecretFunction"
  role          = aws_iam_role.lambda_secret_rotation_role.arn
  handler       = "secrets_rotation.lambda_handler"
  runtime       = "python3.9"

  filename         = "secrets_rotation.zip"
  source_code_hash = filebase64sha256("secrets_rotation.zip")

  environment {
    variables = {
      SECRET_NAME = aws_secretsmanager_secret.s3_secret.name
    }
  }
}

### Step 5: SNS & SQS Setup (sns_sqs.tf)

resource "aws_sns_topic" "secret_rotation_topic" {
  name = var.sns_topic_name
  kms_master_key_id = aws_kms_key.sns_sqs_key.arn
}

resource "aws_sqs_queue" "secrets_queue" {
  name              = var.sqs_queue_name
  kms_master_key_id = aws_kms_key.sns_sqs_key.arn
}

resource "aws_sns_topic_subscription" "sqs_subscription" {
  topic_arn = aws_sns_topic.secret_rotation_topic.arn
  protocol  = "sqs"
  endpoint  = aws_sqs_queue.secrets_queue.arn
}

### Step 6: KMS Encryption for SNS & SQS (kms.tf)

resource "aws_kms_key" "sns_sqs_key" {
  description             = "KMS Key for SNS and SQS encryption"
  deletion_window_in_days = 30
}

resource "aws_kms_alias" "sns_sqs_key_alias" {
  name          = "alias/sns-sqs-key"
  target_key_id = aws_kms_key.sns_sqs_key.key_id
}

###  Step 7: CloudWatch Monitoring & Alerts (cloudwatch.tf)

resource "aws_cloudwatch_metric_alarm" "lambda_error_alarm" {
  alarm_name          = "LambdaSecretRotationErrors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "Errors"
  namespace           = "AWS/Lambda"
  period              = 300
  statistic           = "Sum"
  threshold           = 1
  alarm_description   = "Alarm when Lambda secret rotation fails"
  actions_enabled     = true
  alarm_actions       = [aws_sns_topic.secret_rotation_topic.arn]
}

###

terraform init
terraform plan
terraform apply -auto-approve
