#### 1. Lambda

import boto3
import json
import time

# AWS Configuration
AWS_REGION = "eu-north-1"
IAM_USER_NAME = "flowers-test-task"
SECRET_ID = "s3_access_secret"

# Initialize AWS Clients
iam_client = boto3.client("iam", region_name=AWS_REGION)
secrets_manager_client = boto3.client("secretsmanager", region_name=AWS_REGION)


def lambda_handler(event, context):
    """
    Main Lambda handler that rotates IAM credentials while ensuring the new keys work before deleting old ones.
    """
    print(f"üîç Incoming Event: {event}")

    try:
        result = rotate_iam_credentials()
        return {"statusCode": 200, "body": json.dumps(result)}
    except Exception as e:
        print(f"‚ùå Error rotating IAM credentials: {str(e)}")
        return {"statusCode": 500, "body": json.dumps({"status": "Error", "message": str(e)})}


def rotate_iam_credentials():
    """
    Rotates IAM User credentials:
    - Lists existing access keys.
    - Deletes the oldest key if there are already 2.
    - Creates a new access key.
    - Updates AWS Secrets Manager.
    - Ensures the new key is valid before deleting the old one.
    """

    # Step 1: List existing access keys
    access_keys = iam_client.list_access_keys(UserName=IAM_USER_NAME)['AccessKeyMetadata']
    print(f"üîç Found {len(access_keys)} existing access keys")

    # Step 2: Delete the oldest access key if the limit (2) is reached
    if len(access_keys) >= 2:
        oldest_key = sorted(access_keys, key=lambda k: k['CreateDate'])[0]
        iam_client.delete_access_key(UserName=IAM_USER_NAME, AccessKeyId=oldest_key['AccessKeyId'])
        print(f"üóëÔ∏è Deleted old access key: {oldest_key['AccessKeyId']}")

    # Step 3: Create a new IAM access key
    new_key = iam_client.create_access_key(UserName=IAM_USER_NAME)
    new_access_key = new_key["AccessKey"]["AccessKeyId"]
    new_secret_key = new_key["AccessKey"]["SecretAccessKey"]
    print(f"‚úÖ Created new access key: {new_access_key}")

    # Step 4: Fetch current credentials from AWS Secrets Manager
    response = secrets_manager_client.get_secret_value(SecretId=SECRET_ID)
    secret_data = json.loads(response["SecretString"])

    # Store the old access key before updating
    old_access_key = secret_data["access_key"]

    # Step 5: Update AWS Secrets Manager with new credentials
    new_secret_data = {
        "access_key": new_access_key,
        "secret_key": new_secret_key,
        "sns_topic_arn": secret_data["sns_topic_arn"],
        "sns_sqs_queue_url": secret_data["sns_sqs_queue_url"]
    }
    
    secrets_manager_client.update_secret(
        SecretId=SECRET_ID,
        SecretString=json.dumps(new_secret_data)
    )
    print("‚úÖ AWS Secrets Manager updated with new credentials")

    # Step 6: Wait before validating IAM credentials (to allow propagation)
    print("‚è≥ Waiting 10 seconds for IAM Access Key to propagate...")
    time.sleep(10)  

    # Step 7: Validate new credentials **before deleting old keys**
    if validate_iam_credentials(new_access_key, new_secret_key):
        # Step 8: Delete the old IAM access key **only if the new key works**
        iam_client.delete_access_key(UserName=IAM_USER_NAME, AccessKeyId=old_access_key)
        print(f"üóëÔ∏è Deleted previous IAM access key: {old_access_key}")
        return {"status": "Success", "message": "IAM User credentials rotated successfully"}
    else:
        print("‚ùå Validation failed, old credentials not deleted.")
        return {"status": "Error", "message": "Validation failed, old credentials not deleted"}


def validate_iam_credentials(access_key, secret_key, retries=3, delay=5):
    """
    Validates the new IAM credentials by checking access to AWS services.
    Retries validation in case of IAM key propagation delays.
    """
    for attempt in range(retries):
        try:
            session = boto3.Session(
                aws_access_key_id=access_key,
                aws_secret_access_key=secret_key,
                region_name=AWS_REGION
            )
            s3_client = session.client("s3")
            s3_client.list_buckets()  # Simple check to see if credentials work
            print(f"‚úÖ New credentials validated successfully on attempt {attempt+1}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Attempt {attempt+1} - Validation error: {str(e)}")
            time.sleep(delay)  # Wait before retrying

    print("‚ùå All validation attempts failed.")
    return False


### 2. App
import boto3
import json
from flask import Flask, jsonify

app = Flask(__name__)

# AWS Region
AWS_REGION = "CHANGEME"

# S3 Bucket & File
S3_BUCKET = "CHANGEME"
S3_FILE_KEY = "CHANGEME"

# AWS Secrets Manager Secret ID (IAM User credentials for S3, SNS, and SQS)
SECRET_ID = "CHANGEME"


def get_secret():
    """
    Retrieves credentials from AWS Secrets Manager (IAM User for S3, SNS, and SQS).
    """
    client = boto3.client("secretsmanager", region_name=AWS_REGION)
    response = client.get_secret_value(SecretId=SECRET_ID)
    return json.loads(response["SecretString"])


def get_s3_file():
    """
    Reads a file from S3 using credentials stored in AWS Secrets Manager.
    """
    secret = get_secret()
    s3 = boto3.client(
        "s3",
        aws_access_key_id=secret["access_key"],
        aws_secret_access_key=secret["secret_key"],
    )
    response = s3.get_object(Bucket=S3_BUCKET, Key=S3_FILE_KEY)
    return response["Body"].read().decode("utf-8")


def send_sns_notification(message):
    """
    Publishes a message to SNS using credentials stored in AWS Secrets Manager.
    """
    secret = get_secret()
    sns = boto3.client(
        "sns",
        region_name=AWS_REGION,
        aws_access_key_id=secret["access_key"],
        aws_secret_access_key=secret["secret_key"],
    )
    sns.publish(
        TopicArn=secret["sns_topic_arn"],
        Message=message
    )
    return "SNS notification sent!"


def receive_sns_sqs_messages():
    """
    Reads messages from the 'SecretsQueue' SQS queue that is subscribed to the 'FlowerTopic' SNS topic.
    """
    secret = get_secret()
    sqs = boto3.client(
        "sqs",
        region_name=AWS_REGION,
        aws_access_key_id=secret["access_key"],
        aws_secret_access_key=secret["secret_key"],
    )
    response = sqs.receive_message(QueueUrl=secret["sns_sqs_queue_url"], MaxNumberOfMessages=5)

    messages = []
    if "Messages" in response:
        for message in response["Messages"]:
            body = message["Body"]
            receipt_handle = message["ReceiptHandle"]
            
            # Delete the processed message from the queue
            sqs.delete_message(QueueUrl=secret["sns_sqs_queue_url"], ReceiptHandle=receipt_handle)

            messages.append(body)

    return messages if messages else ["No messages in SecretsQueue."]


@app.route("/")
def home():
    """
    API Home Route:
    - Reads a file from S3
    - Publishes a message to SNS (FlowerTopic)
    - Reads messages from the SQS queue (SecretsQueue) subscribed to SNS
    """
    file_content = get_s3_file()
    send_sns_notification("S3 file accessed successfully!")
    sns_sqs_messages = receive_sns_sqs_messages()

    return jsonify({
        "file_content": file_content,
        "sns_sqs_messages": sns_sqs_messages
    })


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

### 3. User Role

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "s3:ListAllMyBuckets",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::flowers-bucket-aws/*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "sns:Publish"
            ],
            "Resource": "arn:aws:sns:eu-north-1:061051264545:FlowerTopic"
        },
        {
            "Effect": "Allow",
            "Action": [
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
            ],
            "Resource": "arn:aws:sqs:eu-north-1:061051264545:SecretsQueue"
        }
    ]
}
### 4. Lambda Role

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "iam:CreateAccessKey",
                "iam:DeleteAccessKey",
                "iam:ListAccessKeys"
            ],
            "Resource": "arn:aws:iam::CHANGEME"
        },
        {
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:UpdateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:CHANGEME"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::CHANGEME"
        },
        {
            "Effect": "Allow",
            "Action": [
                "sns:ListTopics"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "sqs:ListQueues",
                "sqs:GetQueueAttributes"
            ],
            "Resource": "*"
        }
    ]
}

